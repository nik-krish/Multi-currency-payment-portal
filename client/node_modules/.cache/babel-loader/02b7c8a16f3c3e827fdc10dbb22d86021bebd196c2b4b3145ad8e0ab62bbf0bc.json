{"ast":null,"code":"var _jsxFileName = \"D:\\\\payment-app\\\\client\\\\src\\\\ProtectedRoute.js\";\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  allowedRoles\n}) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this);\n  }\n  try {\n    const user = JSON.parse(atob(token.split(\".\")[1])); // Decode JWT payload\n    if (allowedRoles && !allowedRoles.includes(user.userType)) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/unauthorized\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 14\n      }, this); // Redirect if role not allowed\n    }\n    return children;\n  } catch (error) {\n    console.error(\"Invalid token:\", error);\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","allowedRoles","token","localStorage","getItem","to","fileName","_jsxFileName","lineNumber","columnNumber","user","JSON","parse","atob","split","includes","userType","error","console","_c","$RefreshReg$"],"sources":["D:/payment-app/client/src/ProtectedRoute.js"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({ children, allowedRoles }) => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  if (!token) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  try {\r\n    const user = JSON.parse(atob(token.split(\".\")[1])); // Decode JWT payload\r\n    if (allowedRoles && !allowedRoles.includes(user.userType)) {\r\n      return <Navigate to=\"/unauthorized\" />; // Redirect if role not allowed\r\n    }\r\n    return children;\r\n  } catch (error) {\r\n    console.error(\"Invalid token:\", error);\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,KAAK;EACrD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACF,KAAK,EAAE;IACV,oBAAOJ,OAAA,CAACF,QAAQ;MAACS,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,IAAI;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACX,KAAK,CAACY,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,IAAIb,YAAY,IAAI,CAACA,YAAY,CAACc,QAAQ,CAACL,IAAI,CAACM,QAAQ,CAAC,EAAE;MACzD,oBAAOlB,OAAA,CAACF,QAAQ;QAACS,EAAE,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC,CAAC;IAC1C;IACA,OAAOT,QAAQ;EACjB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,oBAAOnB,OAAA,CAACF,QAAQ;MAACS,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;AACF,CAAC;AAACU,EAAA,GAjBIpB,cAAc;AAmBpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}